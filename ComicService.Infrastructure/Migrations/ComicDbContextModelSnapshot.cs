// <auto-generated />
using System;
using ComicService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComicService.Infrastructure.Migrations
{
    [DbContext(typeof(ComicDbContext))]
    partial class ComicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComicService.Core.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_number");

                    b.Property<int>("ComicId")
                        .HasColumnType("integer")
                        .HasColumnName("comic_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("ComicId", "ChapterNumber")
                        .IsUnique();

                    b.ToTable("chapters", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterNumber = 1,
                            ComicId = 1,
                            Content = "The beginning of Luffy's journey...",
                            CreatedAt = new DateTime(2022, 10, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Romance Dawn",
                            ViewCount = 5000
                        },
                        new
                        {
                            Id = 2,
                            ChapterNumber = 2,
                            ComicId = 1,
                            Content = "Luffy meets Zoro...",
                            CreatedAt = new DateTime(2022, 10, 8, 12, 0, 0, 0, DateTimeKind.Utc),
                            Title = "The Man in the Straw Hat",
                            ViewCount = 4500
                        },
                        new
                        {
                            Id = 3,
                            ChapterNumber = 1,
                            ComicId = 2,
                            Content = "A troublesome ninja is born...",
                            CreatedAt = new DateTime(2021, 6, 2, 12, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Uzumaki Naruto",
                            ViewCount = 6000
                        });
                });

            modelBuilder.Entity("ComicService.Core.Domain.Entities.Comic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<int>("TotalChapters")
                        .HasColumnType("integer")
                        .HasColumnName("total_chapters");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Author");

                    b.HasIndex("Title");

                    b.ToTable("comics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Eiichiro Oda",
                            CoverImageUrl = "https://example.com/onepiece.jpg",
                            CreatedAt = new DateTime(2022, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Monkey D. Luffy's adventure to become Pirate King",
                            Status = "Ongoing",
                            Title = "One Piece",
                            TotalChapters = 1095,
                            UpdatedAt = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Author = "Masashi Kishimoto",
                            CoverImageUrl = "https://example.com/naruto.jpg",
                            CreatedAt = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A young ninja's quest to become Hokage",
                            Status = "Completed",
                            Title = "Naruto",
                            TotalChapters = 700,
                            UpdatedAt = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Author = "Hajime Isayama",
                            CoverImageUrl = "https://example.com/aot.jpg",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Humanity's fight against titans",
                            Status = "Completed",
                            Title = "Attack on Titan",
                            TotalChapters = 139,
                            UpdatedAt = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ComicService.Core.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("ComicService.Core.Domain.Entities.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("ComicService.Core.Domain.Entities.Comic", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
