// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reading.Infrastructure.Persistence;

#nullable disable

namespace Reading.Infrastructure.Migrations
{
    [DbContext(typeof(ReadingDbContext))]
    partial class ReadingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReadingService.Core.Domain.Entities.ComicStats", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comic_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComicId"));

                    b.Property<int>("ActiveReaders24h")
                        .HasColumnType("integer")
                        .HasColumnName("active_readers_24h");

                    b.Property<int>("AvgReadingTimeSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("avg_reading_time_seconds");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("TotalReads")
                        .HasColumnType("bigint")
                        .HasColumnName("total_reads");

                    b.Property<int>("UniqueReaders")
                        .HasColumnType("integer")
                        .HasColumnName("unique_readers");

                    b.HasKey("ComicId");

                    b.ToTable("comic_stats", (string)null);

                    b.HasData(
                        new
                        {
                            ComicId = 1,
                            ActiveReaders24h = 45,
                            AvgReadingTimeSeconds = 780,
                            LastUpdated = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalReads = 1250L,
                            UniqueReaders = 320
                        },
                        new
                        {
                            ComicId = 2,
                            ActiveReaders24h = 28,
                            AvgReadingTimeSeconds = 650,
                            LastUpdated = new DateTime(2024, 10, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            TotalReads = 890L,
                            UniqueReaders = 210
                        });
                });

            modelBuilder.Entity("ReadingService.Core.Domain.Entities.ReadingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_id");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_number");

                    b.Property<int>("ComicId")
                        .HasColumnType("integer")
                        .HasColumnName("comic_id");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean")
                        .HasColumnName("completed");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<int>("ReadingDurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("reading_duration_seconds");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ComicId");

                    b.HasIndex("ReadAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ComicId");

                    b.ToTable("reading_history", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChapterId = 1,
                            ChapterNumber = 1,
                            ComicId = 1,
                            Completed = true,
                            ReadAt = new DateTime(2024, 10, 3, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReadingDurationSeconds = 600,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChapterId = 2,
                            ChapterNumber = 2,
                            ComicId = 2,
                            Completed = true,
                            ReadAt = new DateTime(2024, 10, 4, 14, 30, 0, 0, DateTimeKind.Utc),
                            ReadingDurationSeconds = 720,
                            UserId = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
