using Microsoft.EntityFrameworkCore;
using ReadingService.Core.Domain.Entities;
using System;

namespace Reading.Infrastructure.Persistence
{
    public class ReadingDbContext : DbContext
    {
        public ReadingDbContext(DbContextOptions<ReadingDbContext> options) : base(options)
        {
        }

        public DbSet<ReadingHistory> ReadingHistory { get; set; } = null!;
        public DbSet<ComicStats> ComicStats { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // =============================
            // ReadingHistory
            // =============================
            modelBuilder.Entity<ReadingHistory>(entity =>
            {
                entity.ToTable("reading_history");
                entity.HasKey(e => e.Id);

                // ✅ Id tự tăng (PostgreSQL sẽ dùng GENERATED BY DEFAULT AS IDENTITY)
                entity.Property(e => e.Id)
                      .HasColumnName("id")
                      .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                      .HasColumnName("user_id")
                      .IsRequired();

                entity.Property(e => e.ComicId)
                      .HasColumnName("comic_id")
                      .IsRequired();

                entity.Property(e => e.ChapterId)
                      .HasColumnName("chapter_id")
                      .IsRequired();

                entity.Property(e => e.ChapterNumber)
                      .HasColumnName("chapter_number")
                      .IsRequired();

                // ✅ Dùng timestamp UTC
                entity.Property(e => e.ReadAt)
                      .HasColumnName("read_at")
                      .HasColumnType("timestamp with time zone")
                      .IsRequired();

                entity.Property(e => e.ReadingDurationSeconds)
                      .HasColumnName("reading_duration_seconds");

                entity.Property(e => e.Completed)
                      .HasColumnName("completed");

                entity.HasIndex(e => new { e.UserId, e.ComicId });
                entity.HasIndex(e => e.ComicId);
                entity.HasIndex(e => e.UserId);
                entity.HasIndex(e => e.ReadAt);
            });

            // =============================
            // ComicStats
            // =============================
            modelBuilder.Entity<ComicStats>(entity =>
            {
                entity.ToTable("comic_stats");
                entity.HasKey(e => e.ComicId);

                entity.Property(e => e.ComicId)
                      .HasColumnName("comic_id");

                entity.Property(e => e.TotalReads)
                      .HasColumnName("total_reads");

                entity.Property(e => e.UniqueReaders)
                      .HasColumnName("unique_readers");

                entity.Property(e => e.ActiveReaders24h)
                      .HasColumnName("active_readers_24h");

                entity.Property(e => e.AvgReadingTimeSeconds)
                      .HasColumnName("avg_reading_time_seconds");

                entity.Property(e => e.LastUpdated)
                      .HasColumnName("last_updated")
                      .HasColumnType("timestamp with time zone")
                      .IsRequired();
            });

            // =============================
            // ✅ Seed Data (chỉ dùng giá trị cố định UTC)
            // =============================
            modelBuilder.Entity<ComicStats>().HasData(
                new ComicStats
                {
                    ComicId = 1,
                    TotalReads = 1250,
                    UniqueReaders = 320,
                    ActiveReaders24h = 45,
                    AvgReadingTimeSeconds = 780,
                    LastUpdated = new DateTime(2024, 10, 1, 0, 0, 0, DateTimeKind.Utc)
                },
                new ComicStats
                {
                    ComicId = 2,
                    TotalReads = 890,
                    UniqueReaders = 210,
                    ActiveReaders24h = 28,
                    AvgReadingTimeSeconds = 650,
                    LastUpdated = new DateTime(2024, 10, 2, 0, 0, 0, DateTimeKind.Utc)
                }
            );

            modelBuilder.Entity<ReadingHistory>().HasData(
                new ReadingHistory
                {
                    Id = 1,
                    UserId = 1,
                    ComicId = 1,
                    ChapterId = 1,
                    ChapterNumber = 1,
                    ReadAt = new DateTime(2024, 10, 3, 12, 0, 0, DateTimeKind.Utc),
                    ReadingDurationSeconds = 600,
                    Completed = true
                },
                new ReadingHistory
                {
                    Id = 2,
                    UserId = 2,
                    ComicId = 2,
                    ChapterId = 2,
                    ChapterNumber = 2,
                    ReadAt = new DateTime(2024, 10, 4, 14, 30, 0, DateTimeKind.Utc),
                    ReadingDurationSeconds = 720,
                    Completed = true
                }
            );
        }
    }
}
